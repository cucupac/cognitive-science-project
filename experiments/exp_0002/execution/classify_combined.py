"""
This script classifies the combined embeddings (which you generated by varying alpha)
and saves the results. For each combination of (image_info_level, text_info_level, alpha),
it:
1) Loads the combined CLIP embeddings from vector_store/combined_embeddings/dropout_50
2) Classifies them via SVM, 5-fold CV
3) Overwrites the CSV in experiments/exp_0002/results/data/combined/results.csv
4) Prints accuracy results to the console

No scatter plots are generated in this version.
"""

import os
import sys
from pathlib import Path
import csv
import numpy as np

# Removed all imports related to matplotlib / TSNE
# import matplotlib.pyplot as plt
# from sklearn.manifold import TSNE

sys.path.append(
    os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", ".."))
)

from classifiers.svm import evaluate_svm_classifier

os.makedirs("experiments/exp_0002/results/data/combined", exist_ok=True)

CSV_RESULTS_PATH = "experiments/exp_0002/results/data/combined/results.csv"

PAIRS = [
    ("low_info_img__high_info_text", "LowImg-HighText"),
    ("high_info_img__low_info_text", "HighImg-LowText"),
    ("low_info_img__low_info_text", "LowImg-LowText"),
    ("high_info_img__high_info_text", "HighImg-HighText"),
]
ALPHAS = [0.0, 0.25, 0.5, 0.75, 1.0]


def load_vectors_labels(embedding_folder: str):
    vectors, labels = [], []
    for file in Path(embedding_folder).glob("*.npy"):
        vec = np.load(file)
        label = 0 if "cat" in file.name else 1
        vectors.append(vec)
        labels.append(label)
    return np.array(vectors), np.array(labels)


def run_svm_experiment(debug=False):
    base_combined_path = Path("vector_store/combined_embeddings/dropout_50")

    # Overwrite CSV with header
    with open(CSV_RESULTS_PATH, mode="w", newline="") as f:
        writer = csv.writer(f)
        writer.writerow(["representation", "alpha", "accuracy_mean", "accuracy_std"])

    for folder_name, display_name in PAIRS:
        for alpha in ALPHAS:
            alpha_folder = base_combined_path / folder_name / f"alpha_{alpha:.2f}"
            if not alpha_folder.is_dir():
                print(f"Warning: Folder {alpha_folder} not found. Skipping.")
                continue

            embeddings, labels = load_vectors_labels(str(alpha_folder))
            mean, std = evaluate_svm_classifier(str(alpha_folder), debug=debug)

            print(
                f"[{display_name}, alpha={alpha:.2f}] Accuracy (SVM): {mean:.3f} Â± {std:.3f}"
            )

            with open(CSV_RESULTS_PATH, mode="a", newline="") as f:
                writer = csv.writer(f)
                writer.writerow(
                    [display_name, f"{alpha:.2f}", f"{mean:.3f}", f"{std:.3f}"]
                )


if __name__ == "__main__":
    run_svm_experiment(debug=True)
