"""
This script classifies the combined embeddings (which you generated by varying alpha)
and saves the results. For each combination of (image_info_level, text_info_level, alpha),
it:
1) Loads the combined CLIP embeddings from vector_store/combined_embeddings/
2) Classifies them via logistic regression, 5-fold CV
3) Saves a t-SNE plot to experiements/exp_0001/results/images/combined/scatter_plots/
4) Appends accuracy statistics to experiements/exp_0001/results/data/combined/results.csv

It does NOT compare across alpha values or against baselines; it simply evaluates each
condition independently.
"""

import os
import sys
from pathlib import Path
import csv

# Allow file importing from parent directory
sys.path.append(
    os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..", ".."))
)

import numpy as np
import matplotlib.pyplot as plt
from sklearn.manifold import TSNE

from classifiers.logistic_regression import evaluate_classifier

# Make sure these directories exist
os.makedirs("experiements/exp_0001/results/images/combined", exist_ok=True)
os.makedirs("experiements/exp_0001/results/data/combined", exist_ok=True)

CSV_RESULTS_PATH = "experiements/exp_0001/results/data/combined/results.csv"

# Define the pairs and alpha values you want to test
# (These match the directory structure you created in generate_combined_embeddings.py)
PAIRS = [
    ("low_info_img__high_info_text", "LowImg-HighText"),
    ("high_info_img__low_info_text", "HighImg-LowText"),
    ("low_info_img__low_info_text", "LowImg-LowText"),
    ("high_info_img__high_info_text", "HighImg-HighText"),
]
ALPHAS = [0.0, 0.25, 0.5, 0.75, 1.0]


def load_vectors_labels(embedding_folder: str):
    """
    Load the raw embeddings and labels (0=cat, 1=dog) from 'embedding_folder'.
    Returns: (vectors, labels)
    """
    vectors, labels = [], []
    for file in Path(embedding_folder).glob("*.npy"):
        vec = np.load(file)
        label = 0 if "cat" in file.name else 1
        vectors.append(vec)
        labels.append(label)
    return np.array(vectors), np.array(labels)


def plot_tsne(embeddings, labels, outpath: str):
    """
    Creates a 2D t-SNE plot for the embeddings, saving to 'outpath'.
    """
    X_tsne = TSNE(n_components=2, random_state=42).fit_transform(embeddings)
    plt.figure()
    plt.scatter(X_tsne[labels == 0, 0], X_tsne[labels == 0, 1], label="cat")
    plt.scatter(X_tsne[labels == 1, 0], X_tsne[labels == 1, 1], label="dog")
    plt.legend()
    plt.title("t-SNE of Combined Embeddings")
    plt.savefig(outpath)
    plt.close()


def save_results_csv(
    representation_name: str, alpha: float, accuracy_mean: float, accuracy_std: float
):
    """
    Append a row to the 'results.csv' file with columns:
        [representation_name, alpha, accuracy_mean, accuracy_std]
    """
    file_exists = os.path.isfile(CSV_RESULTS_PATH)
    with open(CSV_RESULTS_PATH, mode="a", newline="") as f:
        writer = csv.writer(f)
        # Write header if file is new
        if not file_exists:
            writer.writerow(
                ["representation", "alpha", "accuracy_mean", "accuracy_std"]
            )
        writer.writerow(
            [
                representation_name,
                f"{alpha:.2f}",
                f"{accuracy_mean:.3f}",
                f"{accuracy_std:.3f}",
            ]
        )


def run_combined_experiment(debug=False):
    """
    Runs classification on all combined embeddings for each pair & alpha,
    generating t-SNE plots and saving accuracy results to a CSV.
    """
    base_combined_path = Path("vector_store/combined_embeddings")

    for folder_name, display_name in PAIRS:
        for alpha in ALPHAS:
            # e.g., vector_store/combined_embeddings/low_info_img__high_info_text/alpha_0.25
            alpha_folder = base_combined_path / folder_name / f"alpha_{alpha:.2f}"
            if not alpha_folder.is_dir():
                print(f"Warning: Folder {alpha_folder} not found. Skipping.")
                continue

            # Load data & do t-SNE
            embeddings, labels = load_vectors_labels(str(alpha_folder))
            tsne_out = f"experiements/exp_0001/results/images/combined/scatter_plots/{folder_name}_alpha_{alpha:.2f}_tsne.png"
            plot_tsne(embeddings, labels, tsne_out)

            # Evaluate classifier
            mean, std = evaluate_classifier(str(alpha_folder), debug=debug)
            print(
                f"[{display_name}, alpha={alpha:.2f}] Accuracy: {mean:.3f} Â± {std:.3f}"
            )

            # Save CSV results
            save_results_csv(display_name, alpha, mean, std)


if __name__ == "__main__":
    # Run the combined experiment. Turn debug=True to see confusion matrices, etc.
    run_combined_experiment(debug=True)
